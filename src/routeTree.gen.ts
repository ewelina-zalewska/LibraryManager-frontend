/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as RegisterImport } from "./routes/register";
import { Route as BooksImport } from "./routes/books";
import { Route as IndexImport } from "./routes/index";
import { Route as BooksBookIdImport } from "./routes/books/$bookId";

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
	id: "/register",
	path: "/register",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/register.lazy").then((d) => d.Route));

const BooksRoute = BooksImport.update({
	id: "/books",
	path: "/books",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/books.lazy").then((d) => d.Route));

const IndexRoute = IndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any);

const BooksBookIdRoute = BooksBookIdImport.update({
	id: "/$bookId",
	path: "/$bookId",
	getParentRoute: () => BooksRoute,
} as any).lazy(() =>
	import("./routes/books/$bookId.lazy").then((d) => d.Route),
);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		"/books": {
			id: "/books";
			path: "/books";
			fullPath: "/books";
			preLoaderRoute: typeof BooksImport;
			parentRoute: typeof rootRoute;
		};
		"/register": {
			id: "/register";
			path: "/register";
			fullPath: "/register";
			preLoaderRoute: typeof RegisterImport;
			parentRoute: typeof rootRoute;
		};
		"/books/$bookId": {
			id: "/books/$bookId";
			path: "/$bookId";
			fullPath: "/books/$bookId";
			preLoaderRoute: typeof BooksBookIdImport;
			parentRoute: typeof BooksImport;
		};
	}
}

// Create and export the route tree

interface BooksRouteChildren {
	BooksBookIdRoute: typeof BooksBookIdRoute;
}

const BooksRouteChildren: BooksRouteChildren = {
	BooksBookIdRoute: BooksBookIdRoute,
};

const BooksRouteWithChildren = BooksRoute._addFileChildren(BooksRouteChildren);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/books": typeof BooksRouteWithChildren;
	"/register": typeof RegisterRoute;
	"/books/$bookId": typeof BooksBookIdRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/books": typeof BooksRouteWithChildren;
	"/register": typeof RegisterRoute;
	"/books/$bookId": typeof BooksBookIdRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexRoute;
	"/books": typeof BooksRouteWithChildren;
	"/register": typeof RegisterRoute;
	"/books/$bookId": typeof BooksBookIdRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/books" | "/register" | "/books/$bookId";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/books" | "/register" | "/books/$bookId";
	id: "__root__" | "/" | "/books" | "/register" | "/books/$bookId";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	BooksRoute: typeof BooksRouteWithChildren;
	RegisterRoute: typeof RegisterRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	BooksRoute: BooksRouteWithChildren,
	RegisterRoute: RegisterRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/books",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/books": {
      "filePath": "books.tsx",
      "children": [
        "/books/$bookId"
      ]
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/books/$bookId": {
      "filePath": "books/$bookId.tsx",
      "parent": "/books"
    }
  }
}
ROUTE_MANIFEST_END */
